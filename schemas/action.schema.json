{
  "$schema": "http://json-schema.org/schema#",
  "version": "2.1.0",
  "id": "https://github.com/Lona/vscode-github-actions/schemas/action.schema.json",
  "title": "GitHub Action",
  "description": "The schema for a GitHub Action",
  "type": "object",
  "additionalProperties": false,
  "required": ["name", "description", "runs"],
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of your action. GitHub displays the `name` in the **Actions** tab to help visually identify actions in each job.",
      "minLength": 1
    },
    "author": {
      "type": "string",
      "description": "The name of the action's author."
    },
    "description": {
      "type": "string",
      "description": "A short description of the action."
    },
    "inputs": {
      "description": "Input parameters allow you to specify data that the action expects to use during runtime. GitHub stores input parameters as environment variables. Input ids with uppercase letters are converted to lowercase during runtime. We recommended using lowercase input ids.",
      "patternProperties": {
        "^([a-zA-Z0-9\\-_])+$": {
          "description": "A `string` identifier to associate with the input. The value of `<input_id>` is a map of the input's metadata. The `<input_id>` must be a unique identifier within the `inputs` object. The `<input_id>` must start with a letter or `_` and contain only alphanumeric characters,`-`, or `_`.",
          "additionalProperties": false,
          "required": ["description", "required"],
          "properties": {
            "description": {
              "type": "string",
              "description": "A `string` description of the input parameter."
            },
            "required": {
              "type": "boolean",
              "description": "A `boolean` to indicate whether the action requires the input parameter. Set to `true` when the parameter is required."
            },
            "default": {
              "type": "string",
              "description": "A `string` representing the default value. The default value is used when an input parameter isn't specified in a workflow file."
            }
          }
        }
      }
    },
    "outputs": {
      "description": "Output parameters allow you to specify the data that subsequent actions can use later in the workflow after the action that defines these outputs has run. For example, if you had an action that performed the addition of two inputs (x + y = z), the action could output the sum (z) for other actions to use as an input.\n\nOutput ids with uppercase letters are converted to lowercase during runtime. We recommended using lowercase output ids.",
      "patternProperties": {
        "^([a-zA-Z0-9\\-_])+$": {
          "description": "A `string` identifier to associate with the output. The value of `<output_id>` is a map of the input's metadata. The `<output_id>` must be a unique identifier within the `inputs` object. The `<output_id>` must start with a letter or `_` and contain only alphanumeric characters,`-`, or `_`.",
          "additionalProperties": false,
          "required": ["description"],
          "properties": {
            "description": {
              "type": "string",
              "description": "A `string` description of the output parameter."
            }
          }
        }
      }
    },
    "runs": {
      "description": "The command to run when the action executes.",
      "additionalProperties": false,
      "required": ["using"],
      "properties": {
        "using": {
          "description": "`docker` or the application to use to execute the code specified in `main`.",
          "type": "string"
        },
        "main": {
          "description": "The code file that contains your action code. The application specified with the `using` syntax will execute this file.",
          "type": "string"
        },
        "image": {
          "description": "The Docker image to use as the container to run the action. The value can be the Docker base image name, a local `Dockerfile` in your repository, a public docker Hub or registry. To reference a `Dockerfile` local to your repository, use a path relative to the root of the repository. The application specified with the `using` syntax will execute this file.",
          "type": "string"
        },
        "entrypoint": {
          "description": "Overrides the Docker `ENTRYPOINT` in the `Dockerfile`, or sets it if one wasn't already specified. If an action does not use the `runs` keyword, the commands in `entrypoint` will execute. The Docker `ENTRYPOINT` instruction has a shell form and exec form. The Docker `ENTRYPOINT` documentation recommends using the exec form of the `ENTRYPOINT` instruction.",
          "type": "string"
        },
        "args": {
          "description": "An `array of strings` that define the inputs for a Docker container. Inputs can include hardcoded strings. GitHub passes the `args` to the container's `ENTRYPOINT` when the container starts up.\n\nThe `args` are used in place of the `CMD` instruction in a `Dockerfile`. If you use `CMD` in your Dockerfile, use the guidelines ordered by preference:\n\n1. Document required arguments in the action's README and omit them from the CMD instruction.\n2. Use defaults that allow using the action without specifying any `args`.\n3. If the action exposes a `--help` flag, or something similar, use that as the default to make your action self-documenting.",
          "type": "string"
        },
        "env": {
          "patternProperties": {
            "^([a-zA-Z_])+$": {
              "type": "string"
            }
          },
          "description": "Specifies a key/value map of environment variables to set in the virtual environment.",
          "additionalProperties": false
        }
      }
    },
    "branding": {
      "description": "You can use a color and Feather icon to create a badge to personalize and distinguish your action in GitHub Marketplace. For more information, see \"GitHub Actions in the GitHub Marketplace\" in the GitHub Developer documentation.",
      "additionalProperties": false,
      "properties": {
        "color": {
          "type": "string",
          "description": "The background color of the badge. Can be one of: `white`, `yellow`, `blue`, `green`, `orange`, `red`, `purple`, or `gray-dark`."
        },
        "icon": {
          "type": "string",
          "description": "The name of the [Feather](https://feathericons.com/) icon to use."
        }
      }
    }
  }
}
