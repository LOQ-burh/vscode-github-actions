{
  "$schema": "http://json-schema.org/schema#",
  "version": "2.2.2",
  "id": "https://github.com/Lona/vscode-github-actions/schemas/workflow.schema.json",
  "title": "GitHub Action Workflow",
  "description": "The schema for a GitHub Action Workflow. For more information, see https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions.",
  "type": "object",
  "additionalProperties": false,
  "required": ["on", "jobs"],
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of your workflow. GitHub displays the names of your workflows on your repository's actions page. If you omit this field, GitHub sets the `name` to the workflow's filename.",
      "minLength": 1
    },
    "on": {
      "oneOf": [
        {
          "type": "string",
          "minLength": 1,
          "description": "The name of the GitHub event that triggers the workflow. For a list of available events, see https://help.github.com/en/articles/events-that-trigger-workflows."
        },
        {
          "items": {
            "type": "string",
            "minLength": 1
          },
          "type": "array",
          "minItems": 1,
          "uniqueItems": true,
          "description": "The name of the GitHub events that triggers the workflow. For a list of available events, see https://help.github.com/en/articles/events-that-trigger-workflows."
        },
        {
          "type": "object",
          "properties": {
            "schedule": {
              "items": {
                "type": "object",
                "required": ["cron"],
                "properties": {
                  "cron": {
                    "type": "string",
                    "description": "For more information about cron syntax, see https://help.github.com/en/articles/events-that-trigger-workflows."
                  }
                }
              },
              "description": "You can schedule a workflow to run at specific UTC times using POSIX cron syntax. Scheduled workflows run on the latest commit on the default or base branch.",
              "type": "array",
              "minItems": 1
            }
          },
          "patternProperties": {
            "^([a-z_])+$": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "types": {
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "type": "array",
                      "minItems": 1,
                      "description": "Selects the types of activity that will trigger a workflow run. Most GitHub events are triggered by more than one type of activity. For example, the event for the release resource is triggered when a release is `published`, `unpublished`, `created`, `edited`, `deleted`, or `prereleased`. The `types` keyword enables you to narrow down activity that causes the workflow to run. When only one activity type triggers a webhook event, the `types` keyword is unnecessary.\n\nYou can use an array of event `types`. For more information about each event and their activity types, see https://help.github.com/en/articles/events-that-trigger-workflows.",
                      "uniqueItems": true
                    },
                    "branches": {
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "type": "array",
                      "minItems": 1,
                      "description": "When using the `push` and `pull_request` events, you can configure a workflow to run on specific branches or tags. If you only define only `tags` or only `branches`, the workflow won't run for events affecting the undefined Git ref.\n\nThe `branches`, `branches-ignore`, `tags`, and `tags-ignore` keywords accept glob patterns that use the `*` and `**` wildcard characters to match more than one branch or tag name. For more information, see the https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet.",
                      "uniqueItems": true
                    },
                    "branches-ignore": {
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "type": "array",
                      "minItems": 1,
                      "description": "When using the `push` and `pull_request` events, you can configure a workflow to run on specific branches or tags. If you only define only `tags` or only `branches`, the workflow won't run for events affecting the undefined Git ref.\n\nThe `branches`, `branches-ignore`, `tags`, and `tags-ignore` keywords accept glob patterns that use the `*` and `**` wildcard characters to match more than one branch or tag name. For more information, see the https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet.",
                      "uniqueItems": true
                    },
                    "tags": {
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "type": "array",
                      "minItems": 1,
                      "description": "When using the `push` and `pull_request` events, you can configure a workflow to run on specific branches or tags. If you only define only `tags` or only `branches`, the workflow won't run for events affecting the undefined Git ref.\n\nThe `branches`, `branches-ignore`, `tags`, and `tags-ignore` keywords accept glob patterns that use the `*` and `**` wildcard characters to match more than one branch or tag name. For more information, see the https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet.",
                      "uniqueItems": true
                    },
                    "tags-ignore": {
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "type": "array",
                      "minItems": 1,
                      "description": "When using the `push` and `pull_request` events, you can configure a workflow to run on specific branches or tags. If you only define only `tags` or only `branches`, the workflow won't run for events affecting the undefined Git ref.\n\nThe `branches`, `branches-ignore`, `tags`, and `tags-ignore` keywords accept glob patterns that use the `*` and `**` wildcard characters to match more than one branch or tag name. For more information, see the https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet.",
                      "uniqueItems": true
                    },
                    "paths": {
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "type": "array",
                      "minItems": 1,
                      "description": "When using the `push` and `pull_request` events, you can configure a workflow to run when at least one file does not match `paths-ignore` or at least one modified file matches the configured `paths`. Path filters are not evaluated for pushes to tags.\n\nThe `paths-ignore` and `paths` keywords accept glob patterns that use the `*` and `**` wildcard characters to match more than one path name. For more information, see the https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet.",
                      "uniqueItems": true
                    },
                    "paths-ignore": {
                      "items": {
                        "type": "string",
                        "minLength": 1
                      },
                      "type": "array",
                      "minItems": 1,
                      "description": "When using the `push` and `pull_request` events, you can configure a workflow to run when at least one file does not match `paths-ignore` or at least one modified file matches the configured `paths`. Path filters are not evaluated for pushes to tags.\n\nThe `paths-ignore` and `paths` keywords accept glob patterns that use the `*` and `**` wildcard characters to match more than one path name. For more information, see the https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet.",
                      "uniqueItems": true
                    }
                  }
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ],
      "description": "The name of the GitHub event that triggers the workflow. You can provide a single event string, array of events, array of event types, or an event configuration map that schedules a workflow or restricts the execution of a workflow to specific files, tags, or branch changes. For a list of available events, see https://help.github.com/en/articles/events-that-trigger-workflows."
    },
    "env": {
      "patternProperties": {
        "^([a-zA-Z_])+$": {
          "type": "string"
        }
      },
      "description": "A `map` of environment variables that are available to all jobs and steps in the workflow. You can also set environment variables that are only available to a job or step. For more information, see `jobs.<job_id>.env` and `jobs.<job_id>.steps.env`.\n\nWhen more than one environment variable is defined with the same name, GitHub uses the most specific environment variable. For example, an environment variable defined in a step will override job and workflow variables with the same name, while the step executes. A variable defined for a job will override a workflow variable with the same name, while the job executes.",
      "additionalProperties": false
    },
    "jobs": {
      "patternProperties": {
        "^([a-zA-Z0-9\\-_])+$": {
          "required": ["runs-on"],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the job displayed on GitHub."
            },
            "needs": {
              "oneOf": [
                { "type": "string" },
                { "type": "array", "items": { "type": "string" } }
              ],
              "description": "Identifies any jobs that must complete successfully before this job will run. It can be a string or array of strings. If a job fails, all jobs that need it are skipped unless the jobs use a conditional statement that causes the job to continue."
            },
            "runs-on": {
              "type": "string",
              "enum": [
                "self-hosted",
                "ubuntu-latest",
                "ubuntu-18.04",
                "ubuntu-16.04",
                "windows-latest",
                "macos-latest",
                "${{ matrix.os }}"
              ],
              "description": "The type of virtual host machine to run the job on. Each job runs with a fresh instance of the virtual environment specified by `runs-on`."
            },
            "env": {
              "patternProperties": {
                "^([a-zA-Z_])+$": {
                  "type": "string"
                }
              },
              "description": "A `map` of environment variables that are available to all steps in the job. ou can also set environment variables for the entire workflow or an individual step. For more information, see `env` and `jobs.<job_id>.steps.env`.\n\nWhen more than one environment variable is defined with the same name, GitHub uses the most specific environment variable. For example, an environment variable defined in a step will override job and workflow variables with the same name, while the step executes. A variable defined for a job will override a workflow variable with the same name, while the job executes.",
              "additionalProperties": false
            },
            "if": {
              "type": "string",
              "description": "You can use the `if` conditional to prevent a job from running unless a condition is met. You can use any supported context and expression to create a conditional.\n\nExpressions in an `if` conditional do not require the `${{ }}` syntax. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions."
            },
            "steps": {
              "type": "array",
              "description": "A job contains a sequence of tasks called `steps`. Steps can run commands, run setup tasks, or run an action in your repository, a public repository, or an action published in a Docker registry. Not all steps run actions, but all actions run as a step. Each step runs in its own process in the virtual environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job.",
              "items": {
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "A unique identifier for the step. You can use the id to reference the step in contexts. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions."
                  },
                  "if": {
                    "type": "string",
                    "description": "You can use the `if` conditional to prevent a step from running unless a condition is met. You can use any supported context and expression to create a conditional.\n\nExpressions in an `if` conditional do not require the `${{ }}` syntax. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions."
                  },
                  "name": {
                    "type": "string",
                    "description": "A name for your step to display on GitHub."
                  },
                  "uses": {
                    "type": "string",
                    "description": "Selects an action to run as part of a step in your job. An action is a reusable unit of code. You can use an action defined in the same repository as the workflow, a public repository, or in a published Docker container image.\n\nWe strongly recommend that you include the version of the action you are using by specifying a Git ref, SHA, or Docker tag number. If you don't specify a version, it could break your workflows or cause unexpected behavior when the action owner publishes an update.\n\n- Using the commit SHA of a released action version is the safest for stability and security.\n- Using the specific major action version allows you to receive critical fixes and security patches while still maintaining compatibility. It also assures that your workflow should still work.\n- Using the master branch of an action may be convenient, but if someone releases a new major version with a breaking change, your workflow could break.\n\nSome actions require inputs that you must set using the with keyword. Review the action's README file to determine the inputs required.\n\nActions are either JavaScript files or Docker containers. If the action you're using is a Docker container you must run the job in a Linux virtual environment. For more details, see `runs-on` and https://help.github.com/en/articles/virtual-environments-for-github-actions."
                  },
                  "run": {
                    "type": "string",
                    "description": "Runs command-line programs using the operating system's shell. If you do not provide a `name`, the step name will default to the text specified in the `run` command.\n\nCommands run using non-login shells by default. You can choose a different shell and customize the shell used to run commands. For more information, see https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#using-a-specific-shell.\n\nEach `run` keyword represents a new process and shell in the virtual environment. When you provide multi-line commands, each line runs in the same shell."
                  },
                  "working-directory": {
                    "type": "string",
                    "description": "Using the working-directory keyword, you can specify the working directory of where to run the command."
                  },
                  "shell": {
                    "type": "string",
                    "description": "You can override the default shell settings in the virtual environment's operating system using the shell keyword. You can use built-in shell keywords, or you can define a custom set of shell options."
                  },
                  "with": {
                    "patternProperties": {
                      "^([a-zA-Z0-9_\\-])+$": {
                        "oneOf": [
                          { "type": "boolean" },
                          { "type": "string" },
                          { "type": "number" }
                        ]
                      }
                    },
                    "properties": {
                      "args": {
                        "type": "string",
                        "description": "A `string` that defines the inputs for a Docker container. GitHub passes the `args` to the container's `ENTRYPOINT` when the container starts up. An `array of strings` is not supported by this parameter."
                      },
                      "entrypoint": {
                        "type": "string",
                        "description": "Overrides the Docker `ENTRYPOINT` in the `Dockerfile`, or sets it if one wasn't already specified. Unlike the Docker `ENTRYPOINT` instruction which has a shell and exec form, `entrypoint` keyword accepts only a single string defining the executable to be run."
                      }
                    },
                    "description": "A `map` of the input parameters defined by the action. Each input parameter is a key/value pair. Input parameters are set as environment variables. The variable is prefixed with `INPUT_` and converted to upper case.",
                    "additionalProperties": false
                  },
                  "env": {
                    "patternProperties": {
                      "^([a-zA-Z_])+$": {
                        "type": "string"
                      }
                    },
                    "description": "Sets environment variables for steps to use in the virtual environment. You can also set environment variables for the entire workflow or a job. For more information, see `env` and `jobs.<job_id>.env`.\n\nWhen more than one environment variable is defined with the same name, GitHub uses the most specific environment variable. For example, an environment variable defined in a step will override job and workflow variables with the same name, while the step executes. A variable defined for a job will override a workflow variable with the same name, while the job executes.\n\nPublic actions may specify expected environment variables in the README file. If you are setting a secret in an environment variable, you must set secrets using the secrets context. For more information, see https://help.github.com/en/articles/virtual-environments-for-github-actions and https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.",
                    "additionalProperties": false
                  },
                  "continue-on-error": {
                    "type": "boolean",
                    "description": "Prevents a job from failing when a step fails. Set to `true` to allow a job to pass when this step fails."
                  },
                  "timeout-minutes": {
                    "type": "number",
                    "description": "The maximum number of minutes to run the step before killing the process."
                  }
                }
              }
            },
            "timeout-minutes": {
              "type": "number",
              "description": "The maximum number of minutes to let a workflow run before GitHub automatically cancels it. Default: 360"
            },
            "strategy": {
              "description": "A strategy creates a build matrix for your jobs. You can define different variations of an environment to run each job in.",
              "properties": {
                "matrix": {
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "os": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "self-hosted",
                          "ubuntu-latest",
                          "ubuntu-18.04",
                          "ubuntu-16.04",
                          "windows-latest",
                          "macos-latest"
                        ],
                        "description": "The type of virtual host machine."
                      }
                    },
                    "include": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "description": "You can add additional configuration options to a build matrix job that already exists. You cannot use `include` to add new jobs to a build matrix."
                    },
                    "exclude": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      },
                      "description": "You can remove a specific configurations defined in the build matrix using the `exclude` option. Using ex`clude removes a job defined by the build matrix."
                    }
                  },
                  "description": "A build matrix is a set of different configurations of the virtual environment. For example you might run a job against more than one supported version of a language, operating system, or tool. Each configuration is a copy of the job that runs and reports a status.\n\nYou can specify a matrix by supplying an array for the configuration options. For example, if the GitHub virtual environment supports Node.js versions 6, 8, and 10 you could specify an array of those versions in the matrix.\n\nWhen you define a matrix of operating systems, you must set the required `runs-on` keyword to the operating system of the current job, rather than hard-coding the operating system name. To access the operating system name, you can use the `matrix.os` context parameter to set `runs-on`. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.\n\nYou can run an unlimited number of jobs as long as you are within the workflow usage limits. For more information, see https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#usage-limits."
                },
                "fail-fast": {
                  "type": "boolean",
                  "description": "When set to `true`, GitHub cancels all in-progress jobs if any `matrix` job fails. Default: `true`"
                },
                "max-parallel": {
                  "type": "number",
                  "description": "The maximum number of jobs that can run simultaneously when using a `matrix` job strategy. By default, GitHub will maximize the number of jobs run in parallel depending on the available runners on GitHub-hosted virtual machines."
                },
                "container": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "image": {
                      "type": "string",
                      "description": "The Docker image to use as the container to run the action. The value can be the Docker Hub image name or a public docker registry name."
                    },
                    "env": {
                      "patternProperties": {
                        "^([a-zA-Z_])+$": {
                          "type": "string"
                        }
                      },
                      "description": "Sets a `map` of environment variables in the container.",
                      "additionalProperties": false
                    },
                    "ports": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "description": "Sets an `array` of ports to expose on the container."
                    },
                    "volumes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Sets an `array` of volumes for the container to use. You can use volumes to share data between services or other steps in a job. You can specify named Docker volumes, anonymous Docker volumes, or bind mounts on the host.\n\nTo specify a volume, you specify the source and destination path:\n\n`<source>:<destinationPath>`.\n\nThe `<source>` is a volume name or an absolute path on the host machine, and `<destinationPath>` is an absolute path in the container."
                    },
                    "options": {
                      "type": "string",
                      "description": "Additional Docker container resource options. For a list of options, see \"docker create options.\""
                    }
                  },
                  "description": "A container to run any steps in a job that don't already specify a container. If you have steps that use both script and container actions, the container actions will run as sibling containers on the same network with the same volume mounts.\n\nIf you do not set a `container`, all steps will run directly on the host specified by `runs-on` unless a step refers to an action configured to run in a container."
                }
              }
            },
            "services": {
              "description": "Additional containers to host services for a job in a workflow. These are useful for creating databases or cache services like redis. The runner on the virtual machine will automatically create a network and manage the life cycle of the service containers.\n\nWhen you use a service container for a job or your step uses container actions, you don't need to set port information to access the service. Docker automatically exposes all ports between containers on the same network.\n\nWhen both the job and the action run in a container, you can directly reference the container by its hostname. The hostname is automatically mapped to the service name.\n\nWhen a step does not use a container action, you must access the service using localhost and bind the ports.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "image": {
                  "type": "string",
                  "description": "The Docker image to use as the service container to run the action. The value can be the Docker base image name or a public docker Hub or registry."
                },
                "env": {
                  "patternProperties": {
                    "^([a-zA-Z_])+$": {
                      "type": "string"
                    }
                  },
                  "description": "Sets a `map` of environment variables in the service container.",
                  "additionalProperties": false
                },
                "ports": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "description": "Sets an `array` of ports to expose on the service container."
                },
                "volumes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Sets an `array` of volumes for the service container to use. You can use volumes to share data between services or other steps in a job. You can specify named Docker volumes, anonymous Docker volumes, or bind mounts on the host.\n\nTo specify a volume, you specify the source and destination path:\n\n`<source>:<destinationPath>`.\n\nThe `<source>` is a volume name or an absolute path on the host machine, and `<destinationPath>` is an absolute path in the container."
                },
                "options": {
                  "type": "string",
                  "description": "Additional Docker container resource options. For a list of options, see \"docker create options.\""
                }
              }
            }
          },
          "description": "Each job must have an id to associate with the job. The key `job_id` is a string and its value is a map of the job's configuration data. You must replace `<job_id>` with a string that is unique to the jobs object. The `<job_id>` must start with a letter or `_` and contain only alphanumeric characters, `-`, or `_`."
        }
      },
      "description": "A workflow run is made up of one or more jobs. Jobs run in parallel by default. To run jobs sequentially, you can define dependencies on other jobs using the jobs.<job_id>.needs keyword.\n\nEach job runs in a fresh instance of the virtual environment specified by `runs-on`.\n\nYou can run an unlimited number of jobs as long as you are within the workflow usage limits. For more information, see https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#usage-limits.",
      "additionalProperties": false
    }
  }
}
